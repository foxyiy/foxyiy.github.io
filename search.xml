<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>逻辑运算与循环类指令</title>
      <link href="/2018/09/25/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E4%B8%8E%E5%BE%AA%E7%8E%AF%E7%B1%BB%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/09/25/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E4%B8%8E%E5%BE%AA%E7%8E%AF%E7%B1%BB%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1><span id="逻辑运算与循环类指令"> <center>逻辑运算与循环类指令</center></span></h1><a id="more"></a><p>逻辑运算和移位指令共有25条，有与、或、异或、求反、左右移位、清零等逻辑操作，有直接、寄存器和寄存器间接寻址方式。这类指令一般不影响程序状态字标志。</p><h2><span id="1循环移位指令"> 1.循环移位指令</span></h2><p>指令形式如下：<br>RL A                           ;累加器A中的内容左移一位（rotate left）<br>RR A                           ;累加器A中的内容右移一位（rotate right）<br>RLC A                          ;累加器A中的内容连同进位位CY左移一位（rotate left carry）<br>RRC A                          ;累加器A中的内容连同进位位CY右移一位（rotate right carry）<br>例：（A）=27H，则RL A 为 （27H）×2</p><h2><span id="2求反指令complement"> 2.求反指令（Complement）</span></h2><p>指令形式如下：<br>CPL A                          ；累加器A中的内容按位取反</p><h2><span id="3清零指令clear"> 3.清零指令（clear）</span></h2><p>指令形式如下：<br>CLR A                          ；0→（A），累加器中的内容清零<br>CPL A                             ; A→A^    ,累加器中内容取反</p><h2><span id="4逻辑与操作指令and-logic"> 4.逻辑与操作指令（and logic）</span></h2><p>指令形式如下：<br>ANL A,Rn                            ;A←(A)∧(Rn)<br>ANL A,@Ri                           ; A←(A)∧((Ri))<br>ANL A,direct                         ; A←(A)∧(direct)<br>ANL A,#data                         ; A←(A)∧data<br>ANL direct,A                         ;direct←(direct) ∧(A)<br>ANL direct, #data                     ；direct←(direct) ∧data<br>运算规则是：相应位“见0为0，全1为1”。<br>常用于不关心位“清0”</p><h2><span id="5逻辑或操作指令or-logic"> 5.逻辑或操作指令（OR Logic）</span></h2><p>指令形式如下：<br>ORL A,Rn                            ;A←(A) ∨(Rn)<br>ORL A,@Ri                           ; A←(A) ∨((Ri))<br>ORL A,direct                         ; A←(A) ∨(direct)<br>ORL A,#data                         ; A←(A) ∨data<br>ORL direct,A                         ;direct←(direct) ∨(A)<br>ORL direct, #data                     ；direct←(direct) ∨data<br>运算规则是：相应位“见1为1，全0为0”。<br>常用于某些关心位“置1“</p><h2><span id="6逻辑异或操作指令exclusive-or-logic"> 6.逻辑异或操作指令（exclusive-or logic）</span></h2><p>指令形式如下：<br>XRL A,Rn                            ;A←(A)   (Rn)<br>XRL A,@Ri                           ; A←(A)   ((Ri))<br>XRL A,direct                         ; A←(A)   (direct)<br>XRL A,#data                         ; A←(A)   data<br>XRL direct,A                         ;direct←(direct)   (A)<br>XRL direct, #data                     ；direct←(direct)   data<br>运算规则是：对应位“相同为0，不同为1”<br>用于关心位取反<br>想给某位清零，可使之与“0”相与；想给某位置1，可使之与“1”相或；想对某位求反，可使之与1相异或。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令系统 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算数运算类指令</title>
      <link href="/2018/09/25/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%B1%BB%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/09/25/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%B1%BB%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2><span id="算术运算类指令"> <center>算术运算类指令</center></span></h2><a id="more"></a><h2><span id="1加法指令"> 1.加法指令</span></h2><p>80C51的指令系统中只有8位数据的加法运算指令。<br>（1）不带进位的加法指令（半加）（ADD—addition）<br>指令格式如下：<br>ADD A,Rn                          ;A←(A)+(Rn)<br>ADD A,direct                      ;A←(A)+(direct)<br>ADD A,@Ri                         ;A←(A)+((Ri))<br>ADD A,#data                       ;A←(A)+data</p><p>（2）带进位的加法指令（ADDC—add and carry）<br>指令格式如下：<br>ADDC A,Rn                          ;A←(A)+(Rn)+©<br>ADDC A,direct                      ;A←(A)+(direct)+©<br>ADDC A,@Ri                         ;A←(A)+((Ri))+©<br>ADDC A,#data                       ;A←(A)+data +©</p><p>ADD指令是不带进位的加法指令，将累加器A与指令中的另一个操作数相加，其和保存到A中。</p><p>ADDC指令是带进位的加法指令，将两个操作数相加的同时，还要加上进位标志CY的值。多用于多字节加法运算中。</p><p>INC指令（增量指令）是将操作数加1。</p><p>标志位补充<br>如果是无符号数，都可以用CY标志来判断其是否溢出；而如果是有符号数，则需要用OV标志来判断其是否溢出。</p><p>① OV：作加、减法前，先将两个运算数都按照有符号数的规则扩充成17位。即：<br>符号位是0的前面添一位0，符号位是1的前面添一位1。然后按17位的机器加、减，得出17位的结果。如果17位结果的高两位（即双符号位）不同，就置OV标志为1，否则，OV标志为零。然后取其低16位作为最后结果。<br>② CY: CY位是累加器的进位、借位标志。对于无符号数的运算，CY位就可以表示其是否溢出。但如果是有符号数，则不能按CY标志来判断了。如果运算完后最高位没有进位，CY会被置0，因为ADD或者ADDC命令的执行会影响CY，有进位就置1，无进位就置0，跟CY的初值无关。<br>③ AC：半进位标志位；该位表示当进行加法或减法运算时，低半字节向高半字节是否有进位或借位；当AC=1时，表示低半字节向高半字节有进位或借位；AC=0时，表示低半字节向高半字节没有进位或借位。<br>④ P： 奇偶标志位。<br>P=1，A中“1”的个数为奇数；<br>P=0，A中“1”的个数为偶数。<br>（3）加1指令（INC—increment）<br>INC A                       ;A←(A)+1<br>INC Rn                      ;Rn←(Rn)+1<br>INC direct                   ; direct←(direct)+1<br>INC @Ri                     ;(Ri) ←((Ri))+1<br>INC DPTR                    ;DPTR←(DPTR)+1<br>这组指令的功能是对累加器、寄存器、内部RAM单元或数据指针进行加1操作。</p><p>加法指令对标志位的影响：<br>① 加1指令不影响CY、OV、AC标志位。<br>② 只有对累加器A操作的指令会影响奇偶标志P，即A中有奇数个“1”，P=1；A中偶数个“1”，P=0。<br>③ ADD、ADDC指令要影响CY、OV、AC和P这4个标志。<br>④ 加1指令中除了INC A要影响P标志外，其余4条均不影响标志。</p><pre><code>  例：设内部RAM 30H~32H 有3个单字节的无符号数，求他们的和，并将和的低字节送入33H单元，高字节送入34H。    解：程序清单如下：        MOV A,30H                       ADD A,31H                 ;(A) ←(30H)+(31H),请注意标志位CY        MOV 33H,A                ；前两位相加之和的非进位部分暂存于33H        MOV A,#00H        ADDC A,#00H               ；前两位相加时进位放入A中        MOV 34H,A                ；两数相加时的进位暂存于34H        MOV A,33H                ；前两数相加之和的非进位部分放入A中        ADD A,32H                 ；加第三个字节数，请注意标志位CY        MOV 33H,A                ；和的低字节存入33H        MOV A,34H                 ;将前两数相加时的进位放入A中        ADDC A,#00H               ；将3数相加时的进位值求出并放入A中        MOV 34H,A                 ；和的高字节存入34H单元</code></pre><h2><span id="2减法指令"> 2.减法指令</span></h2><p>（1）带借位减法指令（SUBB—subtract and borrow）<br>指令格式如下：<br>SUBB A,Rn                      ;A←(A)-(Rn)-(CY)<br>SUBB A,@Ri                     ; A←(A)-((Ri))-(CY)<br>SUBB A,direct                    ; A←(A)-( direct)-(CY)<br>SUBB A,#data                   ;A←(A)-data-(CY)<br>这组指令的功能是从累加器A中减去由不同寻址方式确定的操作数及进位标志，结果仍在累加器中。<br>（2）减1指令（DEC—decrement）<br>指令格式如下：<br>DEC A                              ;A←(A)-1<br>DEC Rn                             ;Rn←(Rn)-1<br>DEC @Ri                            ;@ ←((Ri))-1<br>DEC direct                          ;direct←(direct)-1<br>这组指令的功能是对累加器A、寄存器以及内部RAM单元的内容减1。</p><pre><code> EC Rn                             ;Rn←(Rn)-1 DEC @Ri                            ;@ ←((Ri))-1 DEC direct                          ;direct←(direct)-1 这组指令的功能是对累加器A、寄存器以及内部RAM单元的内容减1。</code></pre><h2><span id="3乘法指令mul-multiply"> 3.乘法指令（MUL-multiply）</span></h2><p>MCS-51的指令系统只有一条乘法运算指令，且只能进行8位无符号数的乘法运算。<br>指令格式如下：<br>MUL AB                      ;A←(A)× (B)低字节，B←(A)× (B)高字节</p><p>该指令的功能是把累加器A和寄存器B中的两个8位无符号数相乘，乘积又送到A、B，其中B中存放高位字节，A中存放低位字节。</p><p>若乘积大于0FFH，则溢出标志OV=1。乘法运算总对CY清零，但不影响其它标志位。</p><h2><span id="4除法指令div-divide"> 4.除法指令（DIV-divide）</span></h2><p>指令形式如下：<br>DIV AB                          ; A←(A)/ (B)(商), B←(A)/ (B)(余数)</p><p>该指令是把A中的8位无符号数除以B中的8位无符号数，商存放在A中，余数存放在B中。</p><p>若除数为0，执行该指令后结果不定，并将OV置1。CY在除法运算中总为0。<br>B A,Rn                      ;A←(A)-(Rn)-(CY)<br>SUBB A,@Ri                     ; A←(A)-((Ri))-(CY)<br>SUBB A,direct                    ; A←(A)-( direct)-(CY)<br>SUBB A,#data                   ;A←(A)-data-(CY)<br>这组指令的功能是从累加器A中减去由不同寻址方式确定的操作数及进位标志，结果仍在累加器中。<br>（2）减1指令（DEC—decrement）<br>指令格式如下：<br>DEC A                              ;A←(A)-1<br>DEC Rn                             ;Rn←(Rn)-1<br>DEC @Ri                            ;@ ←((Ri))-1<br>DEC direct                          ;direct←(direct)-1<br>这组指令的功能是对累加器A、寄存器以及内部RAM单元的内容减1。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令系统 </tag>
            
            <tag> 单片夹 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据传输类指令</title>
      <link href="/2018/09/24/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%B1%BB%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/09/24/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%B1%BB%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2><span id="数据传输类指令29条"><center><font color="red"> 数据传输类指令(29条)</font></center></span></h2><a id="more"></a><p><font size="4">数据传输类指令包括5种，分别是内部RAM单元之间的传输类指令，读取ROM中常数表项指令 MOVC,读取片外RAM和接口单元数据的指令  MOVX,堆栈操作类指令  PUSH和POP,数据交换指令   XCH 、  XCHD、 SWAP</font></p><h2><span id="1内部ram单元之间的传输类指令"> 1.内部RAM单元之间的传输类指令</span></h2><p>（1）以累加器A为目的操作数的传送指令</p><p>（2）以工作寄存器Rn（n=0~7）为目的操作数的传送指令</p><p>（3）以间接寄存器为目的操作数的传送指令</p><p>（4）以直接地址为目的操作数的传送指令</p><p>例：分别用三种方法将内部RAM中30H单元的内容送到40H单元。<br>1)直接将30单元的内容传送到40H单元。<br>MOV 40H，30H            ；（40H）=（30H）<br>2)用间接寄存器指向源地址。<br>MOV R0，#30H            ；（R0）=30H<br>MOV 40H，@R0           ；（40H）=（（R0））=（30H）<br>3)用间接寄存器指向目标地址。<br>MOV R0，#40H            ；（R0）=40H<br>MOV @R0，30H           ；（40H）=（30H）<br>5）  以DPTR为目的操作数的传送指令<br>MOV DPTR，#data16            ；DPTR=data16<br>这是整个指令系统中仅有的一条16位数据传送指令，16位寄存器DPTR由DPH和DPL组成。结果是把高8位立即送入DPH，            低8位立即数送入DPL。<br></p><h2><span id="2读写片外ram及接口单元的数据传输指令"> 2.读写片外RAM及接口单元的数据传输指令</span></h2><font color="red" size="4"> 外部数据存储器与内部数据存储器的数据传送只能通过累加器A进行，且只能采用间接寻址方式。</font><br>（1）读外部数据存储器或外部I/O口的指令<br>MOVX A,@Ri                  ;A←((Ri))<br>MOVX A,@DPTR               ;A←((DPTR))<br>（2）写外部数据存储器或外部I/O口的指令<br>MOVX @Ri,A                  ;(Ri) ←(a)<br>MOVX @DPTR,A               ;(DPTR) ←(A)<br>这组指令的功能是访问外部RAM，<font color="red">源操作数采用寄存器间接寻址或寄存器寻址</font>  <h2><span id="3栈操作指令"> 3.栈操作指令</span></h2><p>在80C51内部RAM区可以设定一个先进后出的区域作为一个栈（栈：栈是允许在同一端进行插入和删除操作的特殊线性表除了第一个和第二个数据以外都是首尾相连的数据结构），在特殊功能寄存器中有一个堆栈指针SP（指针：在信息工程中指针是一个用来指示一个内存地址的计算机语言的变量或中央处理器(CPU)中寄存器，在使用一个指针时，一个程序既可以直接使用这个指针所储存的内存地址，又可以使用这个地址里储存的变量或函数的值。），它始终指向栈顶位置。引入堆栈的目的，就是在程序调用或中断时保护和恢复现场数据及断点地址。分为：进栈指令（PUSH），出栈指令（POP）。</p>1、进栈指令<br>PUSH direct ；SP←（SP）+1（先变指针），（SP）←（direct）（再压栈）<br>2、出栈指令<br>POP direct  ；direct←（（SP））（先出栈），SP←（SP）-1（再变指针）<h2><span id="4数据交换指令"> 4.数据交换指令</span></h2><p>数据交换主要在内部RAM和累加器A之间进行，有整字节和半字节两种交换指令。<br>（1）整字节交换指令<br>XCH A,Rn                ;(A)   (Rn)<br>XCH A,direct             ;(A)  ( direct)<br>XCH A,@Ri               ;(A)   ((Ri))<br>这组指令的功能是将累加器A的内容与源操作数所指定的数据进行交换。<br>（2）低半字节交换指令<br>XCHD A,@Ri              ;(A.3~A.0)  ((Ri.3~Ri.0))<br>这条指令的功能是将累加器A的低半字节（D3<sub>D0）与由@Ri指定的内部RAM单元的低半字节（D3</sub>D0）交换，高半字节（D7~D4）保持不变。<br>(3)高、低半字节互换指令<br>SWAP A                  ; (A.3~A.0)  (A.7~A.4)<br>这条指令的功能是将累加器A的高半字节（D7<sub>D4）和低半字节（D3</sub>D0）交换。<br>例：假设（A）=12H，（R0）=34H，内部RAM（34H）=56H，分析每条指令的执行结果。<br>解：将每条指令的执行结果写在注释部分：<br>XCH A,@R0                     ;(A)=((R0))=(34H)=56H,(34H)=(A)=12H<br>XCHD A,@R0                    ;(A)=16H,(34H)=52H<br>SWAP A                        ;(A)=21H</p><h2><span id="5累加器a与rom的数据传送指令查表指令"> 5.累加器A与ROM的数据传送指令（查表指令）</span></h2><p>（1）  基址寄存器为PC的查表指令<br>MOVC A,@A+PC                  ;A←((A)+(PC))<br>（2）  基址寄存器为DPTR的查表指令<br>MOVC A,@A+DPTR                ;A←((A)+(DPTR))<br>例：若（DPTR）=3000H，（A）=20H，执行指令MOVC A，@A+DPTR后，程序存储器3020H单元的内容送入A。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令系统 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>80c51的寻址方式</title>
      <link href="/2018/09/22/80c51%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/09/22/80c51%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2><span id="80c51的寻址方式"> <center> 80c51的寻址方式</center></span></h2><a id="more"></a><h3><span id="寻址方式"> <font color="#ff6600">寻址方式</font></span></h3><blockquote><p><strong>寻址方式</strong>就是指寻找操作数地址或指令转移目标地址的方式，8051单片机共有7种寻址方式，寄存器寻址，直接寻址，寄存器间接寻址，立即寻址，变址寻址，相对寻址和位寻址。</p></blockquote><h3><span id="1寄存器寻址"> <font color="#FF6600">1.寄存器寻址</font></span></h3><blockquote><p>寄存器寻址即利用寄存器名称寻址，操作数存放在寄存器中。如 若（R0=3H）“MOV   A，R0&quot;。将R0中的值复制到累加器A中，利用寄存器名称&quot;&quot;R0&quot;寻到操作数3H的地址。。<br>采用寄存器寻址的寄存器可以为：</p></blockquote><ul><li>工作寄存器 R0-R7(当然是当前工作寄存器的R0-R7)</li><li>累加器A(使用符号ACC表示累加器时属于直接寻址)</li><li>寄存器B</li><li>数据指针DPTR</li></ul><h3><span id="2直接寻址"> <font color="#FF6600">2.直接寻址</font></span></h3><p>直接寻址有两类，</p><blockquote><ul><li>一类是属于操作数的直接寻址。其操作码后的字节存放的是操作数的地址。<br>举个例子，若（30H）=50H,执行&quot;MOV A,30H&quot;后，寄存器A中存放的是（30H）单元中的数据50H.<br>直接寻址的方式可以访问内部RAM的128个单元和SFR区域。此时SFR常采用符号形式表示。如：”ＭOV   A,90H“可以写成”ＭＯＶ   A,P1“,这里”90H“和&quot;&quot;P1&quot;是相同的</li></ul></blockquote><ul><li>另一类是转移目标地址的寻址，这时候操作码之后的字节与准备跳往的目标地址相关。如”LJMP   addr16“,addr16即要跳转的16位地址。</li></ul><h3><span id="3寄存器间接寻址"> <font color="#FF6600">3.寄存器间接寻址</font></span></h3><blockquote><p>寄存器间接寻址，此时寄存器中不在是最终需要的数据，寄存器中存放的数据是操作数的地址，寄存器只是作为一个跳板，所以称作寄存器间接寻址。继续上个例子，另（R0）=30H,  (30H)=5AH，执行指令”MOV   A,@R0“之后，寄存器A中的值为5AH。<br>寄存器间接寻址对应的空间为：</p></blockquote><ul><li>片内RAM(只能采用@R0,@R!,SP)</li><li>片外RAM（只能采用@R0，@R1或@DPTR,  R0或R1提供低8位地址，高8位由p2单独提供）</li></ul><h3><span id="4立即寻址"> <font color="#FF6600">4.立即寻址</font></span></h3><blockquote><p>操作编码中直接给出操作数的方式称为立即寻址。执行指令”ＭOV   A, #35H“后,（Ａ）＝３５Ｈ。<br>立即寻址对应的寻址空间为ＲＯＭ空间。</p></blockquote><h3><span id="5变址寻址"> <font color="#FF6600">5.变址寻址</font></span></h3><blockquote><p>所谓变址寻址即是一个基地址（DPTR,或PC）加上一个偏移量(累加器A)形成的操作数地址的寻址方式，变址寻址用于两种情况，一是对于ROM中的数据寻址。而是用于跳转指令，如&quot;“JMP    @A+DPTR”<br>例子:(240FH)=88H,  (A）=0FH,(DPH)=24H,(DPL)=“00H”,即(DPTR)=2400H,执行指令”MOVC   A,@A+DPTR“后，（A）=88H.原来的(0FH)被覆盖。</p></blockquote><h3><span id="6相对寻址"> <font color="#FF6600">6.相对寻址</font></span></h3><blockquote><p>相对地址用于跳转指令。以PC的当前值（PC执行跳转指令后指向的下条指令的地址）为基准，加上指令中给出的偏移量rel形成的目标地址。此种操作方式是修改PCd的值，用于实现程序的操作跳转。</p></blockquote><h3><span id="7位寻址"> <font color="#FF6600">7.位寻址</font></span></h3><blockquote><p>对位地址中的内容进行操作的寻址方式为位寻址，实质是位的直接寻址。<br>若位地址（00H）=1，执行”MOV     C,00H“后,位地址psw.7(CY)的内容为1，C表示位累加器，</p></blockquote><ul><li>位地址所对应的空间为：片内RAM,20H-2FH单元中的可寻址位，</li><li>SFR空间可寻址位，其常用符号位地址表示，如”CLR   ACC.0“,该指令的功能是将累加器的第0位置零。</li></ul><h2><span id="7种寻址方式所对应的地址空间"> 7种寻址方式所对应的地址空间</span></h2><p>① 立即寻址：立即数<br>② 直接寻址：片内RAM低128字节或特殊功能寄存器。<br>③ 寄存器寻址：工作寄存器R0~R7、A、AB、DPTR。<br>④ 寄存器间接寻址：片内RAM和片外数据空间。<br>⑤ 变址寻址：程序空间。<br>⑥ 相对寻址：程序空间。<br>⑦ 位寻址：片内RAM（20H~2FH）位寻址空间和可位寻址的特殊功能寄存器位地址C。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令系统 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown</title>
      <link href="/2018/09/14/English/"/>
      <url>/2018/09/14/English/</url>
      
        <content type="html"><![CDATA[<h1><span id="欢迎使用-cmd-markdown-编辑阅读器"> <center> 欢迎使用 Cmd Markdown 编辑阅读器</center></span></h1><blockquote></blockquote><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><a id="more"></a><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3><span id="windowsmaclinux-全平台客户端"> </span></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><h2><span id="什么是-markdown"> 什么是 Markdown</span></h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3><span id="1-制作一份待办事宜-todo-列表"> 1. 制作一份待办事宜 </span></h3><ul><li>[ ] 支持以 PDF 格式导出文稿</li><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[x] 新增 Todo 列表功能</li><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能</li></ul><h3><span id="2-书写一个质能守恒公式1"> 2. 书写一个质能守恒公式<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></span></h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8641079999999999em;"></span><span class="strut bottom" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit">m</span><span class="mord"><span class="mord mathit">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h3><span id="3-高亮一段代码2"> 3. 高亮一段代码<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3><span id="4-高效绘制-流程图"> 4. 高效绘制 </span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3><span id="5-高效绘制-序列图"> 5. 高效绘制 </span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3><span id="6-高效绘制-甘特图"> 6. 高效绘制 </span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3><span id="7-绘制表格"> 7. 绘制表格</span></h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><h3><span id="8-更详细语法说明"> 8. 更详细语法说明</span></h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2><span id="什么是-cmd-markdown"> 什么是 Cmd Markdown</span></h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3><span id="1-实时同步预览"> 1. 实时同步预览</span></h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3><span id="2-编辑工具栏"> 2. 编辑工具栏</span></h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3><span id="3-编辑模式"> 3. 编辑模式</span></h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3><span id="4-实时的云端文稿"> 4. 实时的云端文稿</span></h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3><span id="5-离线模式"> 5. 离线模式</span></h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3><span id="6-管理工具栏"> 6. 管理工具栏</span></h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3><span id="7-阅读工具栏"> 7. 阅读工具栏</span></h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3><span id="8-阅读模式"> 8. 阅读模式</span></h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3><span id="9-标签-分类和搜索"> 9. 标签、分类和搜索</span></h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3><span id="10-文稿发布和分享"> 10. 文稿发布和分享</span></h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>支持 <strong>LaTeX</strong> 编辑显示支持，例如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n a_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.804292em;"></span><span class="strut bottom" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="base"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span>， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<center><font size="24" color="red">我不生产文章，我只是文章的搬运工</font></center>]]></content>
      
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
